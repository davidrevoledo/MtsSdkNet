<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NConsole</name>
    </assembly>
    <members>
        <member name="T:NConsole.ArgumentAttribute">
            <summary>Attribute to define a command line argument.</summary>
        </member>
        <member name="P:NConsole.ArgumentAttribute.Name">
            <summary>Gets or sets the argument name.</summary>
        </member>
        <member name="P:NConsole.ArgumentAttribute.Description">
            <summary>Gets or sets the argument description.</summary>
        </member>
        <member name="P:NConsole.ArgumentAttribute.Position">
            <summary>Gets or sets the position of the unnamed argument.</summary>
        </member>
        <member name="P:NConsole.ArgumentAttribute.IsRequired">
            <summary>Gets or sets a value indicating whether the argument is required (default: true).</summary>
        </member>
        <member name="P:NConsole.ArgumentAttribute.AcceptsCommandInput">
            <summary>Gets or sets a value indicating whether the argument accepts an input from a previous command (default: false).</summary>
        </member>
        <member name="M:NConsole.ArgumentAttribute.GetValue(NConsole.IConsoleHost,System.String[],System.Reflection.PropertyInfo,NConsole.IConsoleCommand,System.Object)">
            <summary>Gets the argument value.</summary>
            <param name="consoleHost">The command line host.</param>
            <param name="args">The arguments.</param>
            <param name="property">The property.</param>
            <param name="command">The command.</param>
            <param name="input">The output from the previous command in the chain.</param>
            <returns>The value.</returns>
            <exception cref="T:System.InvalidOperationException">Either the argument Name or Position can be set, but not both.</exception>
            <exception cref="T:System.InvalidOperationException">Either the argument Name or Position can be set, but not both.</exception>
            <exception cref="T:System.InvalidOperationException">The parameter has no default value.</exception>
        </member>
        <member name="T:NConsole.ArgumentAttributeBase">
            <summary>The argument attribute base class.</summary>
        </member>
        <member name="M:NConsole.ArgumentAttributeBase.GetValue(NConsole.IConsoleHost,System.String[],System.Reflection.PropertyInfo,NConsole.IConsoleCommand,System.Object)">
            <summary>Gets the argument value.</summary>
            <param name="consoleHost">The command line host.</param>
            <param name="args">The arguments.</param>
            <param name="property">The property.</param>
            <param name="command"></param>
            <param name="input">The output from the previous command in the chain.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:NConsole.ArgumentAttributeBase.ConvertToType(System.String,System.Type)">
            <summary>Converts a string value to a specific type.</summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NConsole.CommandAttribute">
            <summary>Attribute to define a command class.</summary>
        </member>
        <member name="P:NConsole.CommandAttribute.Name">
            <summary>Gets or sets the name.</summary>
        </member>
        <member name="P:NConsole.CommandAttribute.Description">
            <summary>Gets or sets the description.</summary>
        </member>
        <member name="T:NConsole.CommandLineProcessor">
            <summary>A command base command line processor.</summary>
        </member>
        <member name="M:NConsole.CommandLineProcessor.#ctor(NConsole.IConsoleHost,NConsole.IDependencyResolver)">
            <summary>Initializes a new instance of the <see cref="T:NConsole.CommandLineProcessor" /> class.</summary>
            <param name="consoleHost">The command line host.</param>
            <param name="dependencyResolver">The dependency resolver.</param>
        </member>
        <member name="P:NConsole.CommandLineProcessor.Commands">
            <summary>Gets the list of registered commands.</summary>
        </member>
        <member name="M:NConsole.CommandLineProcessor.RegisterCommand``1(System.String)">
            <summary>Adds a command.</summary>
            <typeparam name="TCommandLineCommand">The type of the command.</typeparam>
            <param name="name">The name of the command.</param>
        </member>
        <member name="M:NConsole.CommandLineProcessor.RegisterCommand``1">
            <summary>Adds a command.</summary>
            <typeparam name="TCommandLineCommand">The type of the command.</typeparam>
        </member>
        <member name="M:NConsole.CommandLineProcessor.RegisterCommandsFromAssembly(System.Reflection.Assembly)">
            <summary>Loads all commands from an assembly (command classes must have the CommandAttribute with a defined Name).</summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:NConsole.CommandLineProcessor.RegisterCommand(System.Type)">
            <summary>Adds a command.</summary>
            <param name="commandType">Type of the command.</param>
            <exception cref="T:System.InvalidOperationException">The command has already been added.</exception>
            <exception cref="T:System.InvalidOperationException">The command class is missing the CommandAttribute attribute.</exception>
        </member>
        <member name="M:NConsole.CommandLineProcessor.RegisterCommand(System.String,System.Type)">
            <summary>Adds a command.</summary>
            <param name="name">The name of the command.</param>
            <param name="commandType">Type of the command.</param>
            <exception cref="T:System.InvalidOperationException">The command has already been added.</exception>
        </member>
        <member name="M:NConsole.CommandLineProcessor.ProcessAsync(System.String[],System.Object)">
            <summary>Processes the command in the given command line arguments.</summary>
            <param name="args">The arguments.</param>
            <param name="input">The input for the first command.</param>
            <returns>The executed command.</returns>
            <exception cref="T:System.InvalidOperationException">The command could not be found.</exception>
            <exception cref="T:System.InvalidOperationException">No dependency resolver available to create a command without default constructor.</exception>
        </member>
        <member name="M:NConsole.CommandLineProcessor.ProcessSingleAsync(System.String[],System.Object)">
            <summary>Processes the command in the given command line arguments.</summary>
            <param name="args">The arguments.</param>
            <param name="input">The input for the command.</param>
            <returns>The executed command.</returns>
            <exception cref="T:System.InvalidOperationException">The command could not be found.</exception>
            <exception cref="T:System.InvalidOperationException">No dependency resolver available to create a command without default constructor.</exception>
        </member>
        <member name="M:NConsole.CommandLineProcessor.Process(System.String[],System.Object)">
            <summary>Processes the command in the given command line arguments.</summary>
            <param name="args">The arguments.</param>
            <param name="input">The output from the previous command.</param>
            <returns>The exeucuted command.</returns>
            <exception cref="T:System.InvalidOperationException">The command could not be found.</exception>
            <exception cref="T:System.InvalidOperationException">No dependency resolver available to create a command without default constructor.</exception>
        </member>
        <member name="M:NConsole.CommandLineProcessor.GetCommandName(System.String[])">
            <summary>Gets the name of the command to execute.</summary>
            <param name="args">The arguments.</param>
            <returns>The command name.</returns>
        </member>
        <member name="M:NConsole.CommandLineProcessor.CreateCommand(System.Type)">
            <exception cref="T:System.InvalidOperationException">No dependency resolver available to create a command without default constructor.</exception>
        </member>
        <member name="T:NConsole.CommandResult">
            <summary>A command result.</summary>
        </member>
        <member name="P:NConsole.CommandResult.Command">
            <summary>Gets or sets the command.</summary>
        </member>
        <member name="P:NConsole.CommandResult.Output">
            <summary>Gets or sets the command output.</summary>
        </member>
        <member name="T:NConsole.ConsoleHost">
            <summary>A command line host implementation which uses System.Console.</summary>
        </member>
        <member name="M:NConsole.ConsoleHost.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NConsole.ConsoleHost"/> class.</summary>
        </member>
        <member name="M:NConsole.ConsoleHost.WriteMessage(System.String)">
            <summary>Writes a message to the console.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NConsole.ConsoleHost.WriteError(System.String)">
            <summary>Writes an error message to the console.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NConsole.ConsoleHost.ReadValue(System.String)">
            <summary>Reads a value from the console.</summary>
            <param name="message">The message.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NConsole.HelpCommand">
            <summary>The help command to show the availble list of commands.</summary>
        </member>
        <member name="M:NConsole.HelpCommand.RunAsync(NConsole.CommandLineProcessor,NConsole.IConsoleHost)">
            <summary>Runs the command.</summary>
            <param name="processor">The processor.</param>
            <param name="host">The host.</param>
            <returns>The input object for the next command.</returns>
        </member>
        <member name="T:NConsole.IConsoleCommand">
            <summary>A command line command.</summary>
        </member>
        <member name="M:NConsole.IConsoleCommand.RunAsync(NConsole.CommandLineProcessor,NConsole.IConsoleHost)">
            <summary>Runs the command.</summary>
            <param name="processor">The processor.</param>
            <param name="host">The host.</param>
            <returns>The output.</returns>
        </member>
        <member name="T:NConsole.IConsoleHost">
            <summary>An abstraction of the command line.</summary>
        </member>
        <member name="M:NConsole.IConsoleHost.WriteMessage(System.String)">
            <summary>Writes a message to the console.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NConsole.IConsoleHost.WriteError(System.String)">
            <summary>Writes an error message.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NConsole.IConsoleHost.ReadValue(System.String)">
            <summary>Reads a value from the console.</summary>
            <param name="message">The message.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NConsole.IDependencyResolver">
            <summary>Interface to resolve a dependency.</summary>
        </member>
        <member name="M:NConsole.IDependencyResolver.GetService(System.Type)">
            <summary>Resolves the service of the given type.</summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="T:NConsole.SwitchAttribute">
            <summary>Attribute to define a switch/boolean attribute.</summary>
        </member>
        <member name="P:NConsole.SwitchAttribute.ShortName">
            <summary>Gets or sets the short name without the '-' prefix.</summary>
        </member>
        <member name="P:NConsole.SwitchAttribute.LongName">
            <summary>Gets or sets the long name without the '--' prefix.</summary>
        </member>
        <member name="M:NConsole.SwitchAttribute.GetValue(NConsole.IConsoleHost,System.String[],System.Reflection.PropertyInfo,NConsole.IConsoleCommand,System.Object)">
            <summary>Gets the argument value.</summary>
            <param name="consoleHost">The command line host.</param>
            <param name="args">The arguments.</param>
            <param name="property">The property.</param>
            <param name="command">The command.</param>
            <param name="input">The output from the previous command in the chain.</param>
            <returns>The value.</returns>
        </member>
    </members>
</doc>
